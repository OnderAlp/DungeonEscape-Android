using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;

public class Player : MonoBehaviour , IDamageable
{
    public int gems = 0;
    private bool isDead = false;

    private Rigidbody2D _rigid;
    private PlayerAnimation _playerAnimation;

    [SerializeField]
    private float _jumpForce = 5.0f;
    [SerializeField]
    private float _speed = 3.0f;
    private bool _grounded = true;
    private bool _jumpDelay = false;
    public bool _doubleJump = false;

    public int Health { get; set; }

    private PlayerInput playerInput;
    private PlayerAutoGenerated playerInputActions;


    protected AudioSource audioSource;

    public AudioClip _walkAudio;
    public AudioClip _emptyAttackAudio;
    public AudioClip _succesfullAttackAudio;
    public AudioClip _deathAudio;
    public AudioClip _jumpAudio;
    public AudioClip _coinAudio;
    public AudioClip _hitAudio;
    public AudioClip _flamingAttackAudio;
    public AudioClip _itemBuyAudio;


    // Start is called before the first frame update
    void Start()
    {
        //DontDestroyOnLoad(this.gameObject);
        //DontDestroyOnLoad(animator);

        _rigid = GetComponent<Rigidbody2D>();
        _playerAnimation = GetComponent<PlayerAnimation>();
        Health = 4;

        playerInput = GetComponent<PlayerInput>();
        playerInputActions = new PlayerAutoGenerated();

        playerInputActions.Player.Enable();

        playerInputActions.Player.Jump.performed += Jump;
        playerInputActions.Player.Attack.performed += AttackAndroid;

        audioSource = GetComponent<AudioSource>();

        UIManager.Instance.UpdateGemCount(this.gems);


    }

    // Update is called once per frame
    void Update()
    {
        if (!isDead)
        {
            Movement();
            JumpA();

            //if (Input.GetMouseButtonDown(0) && _grounded == true)
            //{
                //_playerAnimation.Attack();
            //}
        }

        
    }

    private void FixedUpdate()
    {
        Vector2 inputVector = playerInputActions.Player.Move.ReadValue<Vector2>();
        _rigid.velocity = new Vector2(inputVector.x * _speed, _rigid.velocity.y);

    }

    void Movement()
    {
        float horizontalInput = Input.GetAxisRaw("Horizontal");
        if(!isDead)
            _rigid.velocity = new Vector2(horizontalInput * _speed, _rigid.velocity.y);
        if(Input.GetAxisRaw("Horizontal") != 0 && _grounded)
            PlayAudioClipDelay(_walkAudio);
    }

    public void Jump(InputAction.CallbackContext context)
    {
        if (context.performed && _grounded == true)
        {
            _rigid.velocity = new Vector2(_rigid.velocity.x, _jumpForce);
            PlayAudioClip(_jumpAudio);
            _grounded = false;
            _jumpDelay = true;
            if (GameManager.Instance.hasDoubleJump)
                _doubleJump = true;

            StartCoroutine(jumpDelay());
            _playerAnimation.JumpAnim(1);
        }

        RaycastHit2D hitInfo = Physics2D.Raycast(transform.position, Vector2.down, 1.3f, 1 << 6);
        Debug.DrawRay(transform.position, Vector2.down * 1.3f);

        if (hitInfo.collider != null && _jumpDelay == false)
        {
            _grounded = true;
            _doubleJump = false;
            _playerAnimation.JumpAnim(0);
        }

        if (context.performed && _doubleJump == true && _grounded == false && _jumpDelay == false)
        {
            _rigid.velocity = new Vector2(_rigid.velocity.x, _jumpForce);
            PlayAudioClip(_jumpAudio);
            _doubleJump = false;
            StartCoroutine(jumpDelay());
            _playerAnimation.JumpAnim(1);
        }
    }

    public void AttackAndroid(InputAction.CallbackContext context)
    {
        if (context.performed)
        {
            _playerAnimation.Attack();
            if (GameManager.Instance.hasFireSword)
                PlayAudioClip(_flamingAttackAudio);
            else
                PlayAudioClip(_emptyAttackAudio);
        }
    }

    void JumpA()
    {
        if (Input.GetKey(KeyCode.Space) && _grounded == true)
        {
            _rigid.velocity = new Vector2(_rigid.velocity.x, _jumpForce);
            PlayAudioClip(_jumpAudio);
            _grounded = false;
            _jumpDelay = true;
            if (GameManager.Instance.hasDoubleJump)
                _doubleJump = true;

            StartCoroutine(jumpDelay());
            _playerAnimation.JumpAnim(1);
        }

        RaycastHit2D hitInfo = Physics2D.Raycast(transform.position, Vector2.down, 1.3f, 1 << 6);
        Debug.DrawRay(transform.position, Vector2.down * 1.3f);

        if (hitInfo.collider != null && _jumpDelay == false)
        {
            _grounded = true;
            _doubleJump = false;
            _playerAnimation.JumpAnim(0);
        }

        if (Input.GetKey(KeyCode.Space) && _doubleJump == true && _grounded == false && _jumpDelay == false)
        {
            _rigid.velocity = new Vector2(_rigid.velocity.x, _jumpForce);
            PlayAudioClip(_jumpAudio);
            _doubleJump = false;
            StartCoroutine(jumpDelay());
            _playerAnimation.JumpAnim(1);
        }
    }


    IEnumerator jumpDelay()
    {
        yield return new WaitForSeconds(0.3f);
        _jumpDelay = false;
    }

    public void Damage()
    {
        Debug.Log("Player Damaged!");
        if (!isDead)
        {
            Health--;
            PlayAudioClipDelay(_hitAudio);
            UIManager.Instance.DamageLifeUpdate(Health);
        }
        
        if (Health < 1 && !isDead)
        {
            isDead = true;
            _playerAnimation.Death();
            PlayAudioClip(_deathAudio);
            UIManager.Instance.ActivateGameOverMenu();

        }

    }

    public void AddGems(int gems)
    {
        this.gems += gems;
        PlayAudioClip(_coinAudio);
        UIManager.Instance.UpdateGemCount(this.gems);
    }

    public void DeactivateNewInputSystem()
    {
        playerInput.DeactivateInput();
        playerInputActions.Disable();
    }
    public void PlayAudioClipDelay(AudioClip clip)
    {
        if (!audioSource.isPlaying)
        {
            audioSource.clip = clip;
            audioSource.Play();
        }

    }
    public void PlayAudioClip(AudioClip clip)
    {
            audioSource.clip = clip;
            audioSource.Play();
    }

    public void KillPlayer()
    {
        isDead = true;
        _playerAnimation.Death();
        PlayAudioClip(_deathAudio);
        UIManager.Instance.ActivateGameOverMenu();
    }
}
